{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useState, useEffect } from 'react';\nimport covidJson from \"../covid-19.json\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Question = function Question() {\n  var _useState = useState([{}]),\n      _useState2 = _slicedToArray(_useState, 2),\n      covidQuestions = _useState2[0],\n      setCovidQuestions = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      countId = _useState4[0],\n      setCountId = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      question = _useState6[0],\n      setQuestion = _useState6[1];\n\n  var hello = function hello() {\n    console.log(\"helloooowww\");\n  };\n\n  var getQuestion = function getQuestion(Id) {\n    console.log(\"helloooo questions\");\n    var individualQuestion = covidQuestions.filter(function (item) {\n      return item.id === Id;\n    }).then(function (question) {\n      return console.log(individualQuestion);\n    });\n    return setQuestion(individualQuestion);\n  };\n\n  var getCovidQuestions = function getCovidQuestions() {\n    return _regeneratorRuntime.async(function getCovidQuestions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"entrando\");\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              setTimeout(function () {\n                resolve(covidJson.map(function (item) {\n                  return item;\n                }));\n              }, 1000);\n            }).then(function (resolved) {\n              setCovidQuestions(resolved);\n              console.log(covidQuestions);\n              console.log(\"RESUELTO\");\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    console.log(\"cargando\");\n    getCovidQuestions();\n  }, []);\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: question.question\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: function onPress() {\n        return getQuestion();\n      },\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Proceed\"\n      })\n    }), _jsx(Text, {\n      children: \"Question\"\n    })]\n  });\n};\n\nexport default Question;\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#11d1ab',\n    borderRadius: 25,\n    width: '90%',\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["C:/Users/alejo/OneDrive/Desktop/questionForm/components/Question.js"],"names":["React","useState","useEffect","covidJson","Question","covidQuestions","setCovidQuestions","countId","setCountId","question","setQuestion","hello","console","log","getQuestion","Id","individualQuestion","filter","item","id","then","getCovidQuestions","Promise","resolve","reject","setTimeout","map","resolved","styles","button","buttonText","StyleSheet","create","backgroundColor","borderRadius","width","height","justifyContent","alignItems","textAlign","color"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View, TouchableOpacity } from 'react-native'\r\nimport React, {useState, useEffect} from 'react'\r\nimport covidJson from \"../covid-19.json\"\r\n \r\n\r\n\r\n\r\n\r\nconst Question = () => {\r\n  \r\n\r\n    const [covidQuestions, setCovidQuestions] = useState([{}])\r\n    const [countId,setCountId] = useState(0)\r\n\r\n    const [question, setQuestion] = useState([])\r\n\r\n    const hello = () => {\r\n        console.log(\"helloooowww\");\r\n    };\r\n\r\n    const getQuestion = (Id) => {\r\n        console.log(\"helloooo questions\");\r\n        var individualQuestion = covidQuestions.filter((item) => {\r\n            return item.id === Id;\r\n        }).then((question) =>console.log(individualQuestion))\r\n        \r\n        return setQuestion(individualQuestion);\r\n    };\r\n\r\n\r\n  const getCovidQuestions = async() => {\r\n        \r\n    console.log(\"entrando\")\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        setTimeout(() => {\r\n\r\n\r\n            resolve(covidJson.map((item) =>  item))\r\n        \r\n        },1000)\r\n\r\n    }).then((resolved) => {\r\n        \r\n        \r\n        setCovidQuestions(resolved)\r\n        console.log(covidQuestions)\r\n\r\n        console.log(\"RESUELTO\")\r\n        \r\n    \r\n    })\r\n    \r\n    \r\n    \r\n\r\n\r\n  }\r\n\r\n  \r\n\r\n    \r\n\r\n  useEffect(() => {\r\n\r\n    console.log(\"cargando\")\r\n    getCovidQuestions()\r\n\r\n\r\n\r\n\r\n\r\n\r\n  },[])\r\n  \r\n  \r\n\r\n \r\n\r\n\r\n  \r\n    return (\r\n    <View>\r\n        {\r\n\r\n            <Text>{question.question}</Text>\r\n\r\n        }\r\n        <TouchableOpacity \r\n        style={styles.button}\r\n        onPress={() => getQuestion()}\r\n        >\r\n        <Text style={styles.buttonText}>Proceed</Text>\r\n    </TouchableOpacity>\r\n      <Text>Question</Text>\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default Question\r\n\r\nconst styles = StyleSheet.create({\r\n\r\n\r\n    button: {\r\n\r\n        backgroundColor: '#11d1ab',\r\n        borderRadius: 25,\r\n        width: '90%',\r\n        height: 40,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    \r\n      },\r\n      buttonText:{\r\n        textAlign: 'center',\r\n        color: 'white',\r\n    \r\n      }\r\n})"]},"metadata":{},"sourceType":"module"}